(function () {
    'use strict';

    angular.module('mainApp', [
        // Angular modules 
        'ngRoute',

        // Custom modules 
        'main-app.service',
        // 3rd Party Modules
        'ui.bootstrap'
    ]).constant("validExternalLink", ["/b2b", "/Account/LogOut", "/Account/Login", "/Account/ForgotPassword"]) // "/Account/Register",
       .config(["$routeProvider", "$locationProvider", "validExternalLink",
         function ($routeProvider, $locationProvider, validExternalLink) {
             $locationProvider.html5Mode({
                 enabled: true,
                 requireBase: true
             });

             //$routeProvider.when("/Home/option1/:message", {
             //    templateUrl: "/views/option1.html",
             //    controller: "homeCtrl"
             //});

             //$routeProvider.when("/Home/option2/:message", {
             //    templateUrl: "/views/option2.html",
             //    controller: "homeCtrl"
             //});

             //$routeProvider.when("/Home/option3/:message", {
             //    templateUrl: "/views/option3.html",
             //    controller: "homeCtrl"
             //});

             // Base View

             $routeProvider.when("/", {
                 templateUrl: "/views/base.html"
             });

             $routeProvider.when("/Home", {
                 templateUrl: "/views/base.html"
             });

             $routeProvider.when("/Home/Index", {
                 templateUrl: "/views/base.html"
             });

             // Static view

             $routeProvider.when("/Home/Contacts", {
                 templateUrl: "/views/MainPageApp/Contacts.html"
             });

             $routeProvider.when("/Home/Server", {
                 templateUrl: "/views/MainPageApp/Servers.html"
             });

             $routeProvider.when("/Home/Storage", {
                 templateUrl: "/views/MainPageApp/Storage.html"
             });

             $routeProvider.when("/Home/Certificates", {
                 templateUrl: "/views/MainPageApp/Certificates.html"
             });

             $routeProvider.when("/Home/Partners", {
                 templateUrl: "/views/MainPageApp/Partners.html"
             });

             $routeProvider.when("/Home/Vacancies", {
                 templateUrl: "/views/MainPageApp/Vacancies.html"
             });

             // Account

             $routeProvider.when("/Account/Register", {
                 templateUrl: "/views/Account/register.html",
                 controller: "RegisterController",
                 controllerAs: "Ctrl"
             });

             $routeProvider.when("/Account/Profile", {
                 templateUrl: function (location) {
                     console.log(location);
                     var search = "";
                     for (var index in location) {
                         if (location.hasOwnProperty(index)) {
                             search += index + "=" + location[index];
                         }
                     }
                     if (search === "") {
                         return "/Account/Profile";
                     } else {
                         return "/Account/Profile?" + search ;
                     }
                 },
                 controller: "ProfileController",
                 controllerAs: "Ctrl"
             });

             // Error page

             $routeProvider.when("/Home/Error", {
                 templateUrl: "/views/Shared/Error.html",
                 controller: "ErrorController"
             });

             $routeProvider.otherwise({
                 redirectTo: function (routeParams, path, search) {
                     if (validExternalLink.indexOf(path) > -1) {
                         var srch = '';
                         for (var index in search) {
                             if (search.hasOwnProperty(index)) {
                                 srch += index + "=" + search[index];
                             }
                         }

                         if (srch === '') window.location.replace(path);
                         window.location.replace(path + "?" + srch);
                         return path + "?" + srch;
                     }

                     return "/Home/Error" + "?Path=" + path;
                 }
             });

         }])
       .run(['$rootScope', '$location', function($rootScope, $location) {
           // register listener to watch route changes
           //$rootScope.$on("$routeChangeStart", function (event, next, current) {
           //});

           // Store ReturnUrl
           $rootScope.$on("$routeChangeSuccess", function (event, current, previous) {
               if (angular.isDefined(previous)) {
                   $rootScope.previousPage = previous.$$route.originalPath;
               } else {
                   $rootScope.previousPage = '/';
               }
           });
        }])
       .constant('AppConfig', appConfig());

       // -------------------------------------------

       function appConfig() {
           return {
               requestChangeEmailUrl: "/Account/EmailChangeRequest",
               requestEmailConfirmationUrl: "/Account/ReSendEmailConfirmation",
               //requestUsers: "/Account/UserNames",
               requestCheckUser: "/Account/CheckUser",
               requestChekEmail: "/Account/CheckEmailDuplicate",
               sendRegister: "/Account/Register"
           }
       }
})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('ErrorController', errorCtrl);

    errorCtrl.$inject = ['$scope', '$routeParams']; 

    function errorCtrl($scope, $routeParams) {
        $scope.Path = $routeParams.Path;
    }
})();

(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('GlobalController', globalController);

    globalController.$inject = ['$location']; 

    function globalController($location) {
        /* jshint validthis:true */
        var vm = this;


        activate();

        function activate() { }
    }
})();

(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('MenuController', menuController);

    menuController.$inject = ['$scope', '$location'];

    function menuController($scope, $location) {
        var vm = this;

        vm.register = function () {
            $location.path('/Account/Register');
        }

        vm.login = function () {
            moveToUrlWithReturn('/Account/Login');
        }

        vm.logOff = function () {
            moveToUrlWithReturn('/Account/LogOut');
        }

        vm.profile = function () {
            moveToUrlWithReturn('/Account/Profile');
        }

        vm.b2b = function () {
            $location.path('/b2b');
        }

        function moveToUrlWithReturn(url) {
            if ($location.path() === url) return;
            var currentUrl = $location.url();
            $location.path(url).search('ReturnUrl', currentUrl);
        }

    }
})();

(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('ProfileController', profileController);

    profileController.$inject = ['$location', 'AppConfig', 'dataFactory', 'bootstrapFactory', '$templateCache'];

    function profileController($location, appConfig, dataFactory, bootstrapFactory, $templateCache) {
        /* jshint validthis:true */

        $templateCache.remove('/Account/Profile');
        // or
        //$templateCache.removeAll();

        // variable

        var vm = this;
        vm.data = {}
        vm.allowChangeCompany = false;

        // properties

        Object.defineProperty(vm, "access1C", {
            get: function() {
                if (vm.data.Access1C) return "B2B доступ разрешен";
                return "B2B доступ ЗАПРЕЩЁН";
            } 
        });

        // activate

        activate();

        function activate() { }

        // function

        vm.debug = function() {
            console.log(vm);
        }

        vm.cancel = function () {
            console.log(vm.returnUrl.length);
            if (vm.returnUrl && vm.returnUrl.length > 0) {
                $location.url(vm.returnUrl);
                return;
            }
            $location.url("/");
        }

        vm.save = function () {
            
            dataFactory.sendForm($location.path(), vm.data, vm.antiforgery).then(function () {
                console.log("Form sended");
            }, function() {
                console.log("Form send Error");
            });
        }

        vm.changeCompany = function() {
            vm.allowChangeCompany = true;
        }

        vm.changeEmail = function() {
            // Необходимо выслать изменение email
            var result = bootstrapFactory.showEmailChangeRequest();
            //result.then(function () {
            //    bootstrapFactory.showModalConfiramtion('Письмо с инструкциями по изменению электронного адреса выслано на email:' +
            //        vm.data.Email);
            //}, function () {
            //    bootstrapFactory.showModalConfiramtion('В процессе отправки письма произошла ошибка.');
            //});

        }

        vm.sendConfirmation = function () {
            // необходимо выслать подтверждение email
            var result = dataFactory.sendRequest(appConfig.requestEmailConfirmationUrl, {}, vm.antiforgery);
            result.then(function () {
                bootstrapFactory.showModalConfiramtion('Письмо для подверждения электронного адреса отправлено на email:' +
                                                    vm.data.Email);
            }, function () {
                bootstrapFactory.showModalConfiramtion('В процессе отправки письма произошла ошибка.');
            });

        }
    }
})();

(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('RegisterController', registerController);

    registerController.$inject = ['$location', '$rootScope', 'dataFactory'];

    function registerController($location, $rootScope, dF) {
        /* jshint validthis:true */
        var vm = this;

        // -------------------------

        vm.cancel = function () {
            if ($rootScope.previousPage) {
                $location.url($rootScope.previousPage);
                return;
            }
            $location.url('/');
        }

        vm.submit = function(antiforgery) {
            console.log("submit click");
            dF.sendUserRegistration(vm.data, antiforgery);
        }

        activate();

        function activate() {
            vm.submited = false;
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('homeCtrl', controller);

    controller.$inject = ['$scope', '$routeParams', 'products'];

    function controller($scope, $routeParams, products) {
        $scope.title = 'homeCtrl';
        $scope.params = $routeParams;
        $scope.products = products.query();
        //console.log(products);
        $scope.products.$promise.then(function(result) {
            //console.log(result);
        });
        // console.log($scope.products);
        //activate();

        //function activate() { }
    }
})();

(function () {
    'use strict';

    angular
        .module('mainApp')
        .factory('bootstrapFactory', bootstrapDialog);

    bootstrapDialog.$inject = ['$uibModal'];

    function bootstrapDialog($uibModal) {
        var service = {
            showModalConfiramtion: showModalcfrm,
            showEmailChangeRequest: showEmailChange
        };

        // ---------------------------

        var modalTemplate = '<div class="modal-body">' +
            '<div class="panel panel-info" ng-show="true">' +
            '   <div class = "panel-body"> '+
            '      <p>{{Ctrl.info}}</p>' +
            '   </div>' +
            ' </div>' +
            ' <button type="button" class="btn btn-success" data-ng-click="Ctrl.close()">Ок</button> ' +
            '</div>';

        // --------------------------


        // --------------------------

        return service;

        function showModalcfrm(message) {

            var opts = {
                backdrop: false,
                keyboard: true,
                backdropClick: true,
                size: 'lg',
                template: modalTemplate,
                controller: 'DialogController',
                controllerAs: 'Ctrl'
            };

            opts.resolve = {
                messageData: {
                    info: message
                }
            }

            var modalInstance = $uibModal.open(opts);
        }

        function showEmailChange() {

            console.log("show change email");
            
            var opt = {
                backdrop: false,
                keyboard: true,
                backdropClick: true,
                size: 'lg',
                templateUrl: '/views/dialogs/EmailChange.html',
                controller: 'EmailChangeController',
                controllerAs: 'Ctrl'
            }

            return $uibModal.open(opt);
        }
    }

})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .factory('dataFactory', dataService);

    dataService.$inject = ['$http', 'AppConfig'];

    function dataService($http, appConfig) {
        var service = {
            sendForm: sendFormData,
            sendRequest: sendRequestByUrl,
            //getUsers: sendUsersRequest,
            checkUser: sendCheckUserRequest,
            emailDuplicateCheck: sendCheckEmailDuplicate,
            sendUserRegistration: sendUserRegistration

        };

        return service;

        // Declaration

        function sendFormData(url, data, antiForgeryToken) {

            if (url === "" || angular.isUndefined(url)) return $q.reject("No Url in Request");

            var req = {
                method: 'POST',
                url: url,
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                }
            }

            req.data = angular.toJson(data);

            if (angular.isDefined(antiForgeryToken)) {
                req.headers["__RequestVerificationToken"] = antiForgeryToken;
            }

            console.log(req);

            return $http(req);
        }

        function sendRequestByUrl(url, data, antiForgeryToken) {
            return $http.post(url, data, {
                 headers: { "__RequestVerificationToken": antiForgeryToken }
            });

        }

        //function sendUsersRequest(antiForgeryToken) {
        //    return $http.get(AppConfig.requestUsers, {
        //        headers: { "__RequestVerificationToken": antiForgeryToken }
        //    });
        //}

        function sendCheckUserRequest(name, antiForgeryToken) {
            return $http.get(appConfig.requestCheckUser + "?userName=" + name, {
                headers: { "__RequestVerificationToken": antiForgeryToken }
            });
        }

        function sendCheckEmailDuplicate(email, antiForgeryToken) {
            return $http.get(appConfig.requestChekEmail + "?email=" + email, {
                headers: { "__RequestVerificationToken": antiForgeryToken }
            });
        }

        function sendUserRegistration(data, antiForgeryToken) {
            console.log(data);
            console.log(antiForgeryToken);
            return $http.post(appConfig.sendRegister, {
                headers: { "__RequestVerificationToken": antiForgeryToken }, data: data });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('main-app.service', ['ngResource'])
        .factory('products', moduleMy);
        
        moduleMy.$inject = ['$resource'];

        function moduleMy($resource) {
            return $resource('/api/Products');
    }
})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .directive('compareTo', compareToDirective);

    compareToDirective.$inject = ['$window'];

    function compareToDirective($window) {

        // Creates:
        // 

        var directive = {
            require: "ngModel",
            scope: {
                otherModelValue: "=compareTo"
            },
            link: link,
            restrict: 'A'
        };

        return directive;

        function link(scope, element, attrs, ngModel) {
            ngModel.$validators.compareTo = function (modelValue) {
                return modelValue === scope.otherModelValue;
            };

            scope.$watch("otherModelValue", function () {
                ngModel.$validate();
            });
        }
    }

})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .directive('emailDuplicateCheck', usersDirective);

    usersDirective.$inject = ['$q', 'dataFactory'];

    function usersDirective($q, dataFactory) {

        var directive = {
            require: 'ngModel',
            link: link,
            restrict: 'A',
            scope: {
                antiforgery: "=antiforgery"
            }
        };
        return directive;

        function link(scope, elm, attrs, ctrl) {

            ctrl.$asyncValidators.emailDuplicateCheck = function (modelValue, viewValue) {

                if (ctrl.$isEmpty(modelValue)) {
                    // consider empty model valid
                    return $q.when();
                }

                var def = $q.defer();

                dataFactory.emailDuplicateCheck(modelValue, scope.antiforgery).then(function (reciveBuf) {
                    if (reciveBuf.data) {
                        // The username is available
                        def.resolve();
                    } else {
                        def.reject();
                    }
                }, function () {
                    def.reject();
                });

                return def.promise;
            };

        }
    }

})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .directive('users', usersDirective);

    usersDirective.$inject = ['$q', 'dataFactory'];

    function usersDirective($q, dataFactory) {

        var directive = {
            require: 'ngModel',
            link: link,
            restrict: 'A',
            scope: {
                antiforgery: "=antiforgery"
            }
        };
        return directive;

        function link(scope, elm, attrs, ctrl) {

            ctrl.$asyncValidators.users = function (modelValue, viewValue) {

                if (ctrl.$isEmpty(modelValue)) {
                    // consider empty model valid
                    return $q.when();
                }

                var def = $q.defer();

                dataFactory.checkUser(modelValue, scope.antiforgery).then(function (reciveBuf) {
                    if (reciveBuf.data) {
                        // The username is available
                        def.resolve();
                    } else {
                        def.reject();
                    }
                }, function () {
                    def.reject();
                });

                return def.promise;
            };

        }
    }

})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('DialogController', dialogController);
        //.controller('EmailChangeDialogController', emailChangeController);

    // Base controller
    dialogController.$inject = ['$uibModalInstance', 'messageData'];

    function dialogController($uibModalInstance, messageData) {
        /* jshint validthis:true */
        var vm = this;
        vm.info = messageData.info;

        vm.close = function () {
            $uibModalInstance.close();
        }

    }

    //// Childs -------------

    //// Email Change child
    //emailChangeController.$inject = ['$uibModalInstance', 'messageData'];

    //function emailChangeController($uibModalInstance, messageData) {

    //    dialogController.call(this);

    //    var vm = this;

    //    vm.data = {}

    //    vm.ok = function() {
    //        console.log("Send Email Change Request");
    //    }

    //}

    //emailChangeController.prototype = Object.create(dialogController.prototype);
})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('EmailChangeController', emailChangeController);


    emailChangeController.$inject = ['$uibModalInstance'];

    function emailChangeController($uibModalInstance) {

        var vm = this;

        vm.data = {}

        vm.close = function () {
            $uibModalInstance.close();
        }

        vm.ok = function () {
            console.log("Send Email Change Request");
        }

    }

})();