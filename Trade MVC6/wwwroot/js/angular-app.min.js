(function () {
    'use strict';

    angular.module('mainApp', [
            // Angular modules 
            'ngRoute',

            // Custom modules 
            'main-app.service',
            // 3rd Party Modules
            'ui.bootstrap'
        ]).constant("validExternalLink", ["/b2b", "/Account/LogOut", "/Account/Login", "/Account/ForgotPassword"]) // "/Account/Register",
        .config(["$routeProvider", "$locationProvider", "$httpProvider", "validExternalLink",
            function($routeProvider, $locationProvider, $httpProvider, validExternalLink) {
                $locationProvider.html5Mode({
                    enabled: true,
                    requireBase: true
                });

                // Header for Ajax Checking
                $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

                //$routeProvider.when("/Home/option1/:message", {
                //    templateUrl: "/views/option1.html",
                //    controller: "homeCtrl"
                //});

                //$routeProvider.when("/Home/option2/:message", {
                //    templateUrl: "/views/option2.html",
                //    controller: "homeCtrl"
                //});

                //$routeProvider.when("/Home/option3/:message", {
                //    templateUrl: "/views/option3.html",
                //    controller: "homeCtrl"
                //});

                // Base View

                $routeProvider.when("/", {
                    templateUrl: "/views/base.html"
                });

                $routeProvider.when("/Home", {
                    templateUrl: "/views/base.html"
                });

                $routeProvider.when("/Home/Index", {
                    templateUrl: "/views/base.html"
                });

                $routeProvider.when("/Admin", {
                    templateUrl: "/Admin/Index",
                    controller: "AdminController",
                    controllerAs: "Ctrl"
                });

                $routeProvider.when("/Admin/Index", {
                    templateUrl: "/Admin/Index",
                    controller: "AdminController",
                    controllerAs: "Ctrl"
                });
                // Static view

                $routeProvider.when("/Home/Contacts", {
                    templateUrl: "/views/MainPageApp/Contacts.html"
                });

                $routeProvider.when("/Home/Server", {
                    templateUrl: "/views/MainPageApp/Servers.html"
                });

                $routeProvider.when("/Home/Storage", {
                    templateUrl: "/views/MainPageApp/Storage.html"
                });

                $routeProvider.when("/Home/Certificates", {
                    templateUrl: "/views/MainPageApp/Certificates.html"
                });

                $routeProvider.when("/Home/Partners", {
                    templateUrl: "/views/MainPageApp/Partners.html"
                });

                $routeProvider.when("/Home/Vacancies", {
                    templateUrl: "/views/MainPageApp/Vacancies.html"
                });

                // Account

                $routeProvider.when("/Home/RegisterAccount", {
                    templateUrl: "/views/Account/register.html",
                    controller: "RegisterController",
                    controllerAs: "Ctrl"
                });

                $routeProvider.when("/Home/AccountProfile", {
                    templateUrl: "/Account/Profile",
                    controller: "ProfileController",
                    controllerAs: "Ctrl"
                });

                // Error pages

                $routeProvider.when("/Home/Error", {
                    templateUrl: "/views/Shared/Error.html",
                    controller: "ErrorController"
                });

                $routeProvider.when("/Account/AccessDenied", {
                    templateUrl: "/views/Shared/AccessDenied.html"
                });
                

                $routeProvider.otherwise({
                    redirectTo: function(routeParams, path, search) {
                        if (validExternalLink.indexOf(path) > -1) {
                            var srch = '';
                            for (var index in search) {
                                if (search.hasOwnProperty(index)) {
                                    srch += index + "=" + search[index];
                                }
                            }

                            if (srch === '') window.location.replace(path);
                            window.location.replace(path + "?" + srch);
                            return path + "?" + srch;
                        }

                        return "/Home/Error" + "?Path=" + path;
                    }
                });

            }
        ])
        .run([
            '$rootScope', '$location', function($rootScope, $location) {
                // register listener to watch route changes
                //$rootScope.$on("$routeChangeStart", function (event, next, current) {
                //});

                // Store ReturnUrl
                $rootScope.$on("$routeChangeSuccess", function(event, current, previous) {
                    if (angular.isDefined(previous)) {
                        $rootScope.previousPage = previous.$$route.originalPath;
                    } else {
                        $rootScope.previousPage = '/';
                    }

                });

                // Return to oldUrl Function
                $rootScope.toPreviousPage = function() {
                    if ($rootScope.previousPage) {
                        $location.url($rootScope.previousPage);
                        return;
                    }
                    $location.url('/');
                }

            }
        ]);
})();
(function () {
    'use strict';

    angular
       .module('mainApp')
       .constant('AppConfig', appConfig());

    appConfig.$inject = [];

    function appConfig() {
        return {
            requestChangeEmailUrl: "/Account/EmailChangeRequest",
            requestEmailConfirmationUrl: "/Account/ReSendEmailConfirmation",
            //requestUsers: "/Account/UserNames",
            requestCheckUser: "/Account/CheckUser",
            requestChekEmail: "/Account/CheckEmailDuplicate",
            sendRegister: "/Account/Register",
            accountProfileUrl: "/Account/Profile",
            api : {
                userCrudUrl: '/Api/Users'
            },
            api1C : {
                apiUsers: '/api/1C/Users'
            }
        }
    }

})();
(function() {
    'use strict';

    angular
        .module('mainApp')
        .component('serverManagment', {
            templateUrl: "/views/Admin/ServerManagment.html"
        });
})();
(function() {
    'use strict';

    angular
        .module('mainApp')
        .component('userManagment', {
            templateUrl: "/views/Admin/UserManagment.html",
            controller: "UserManagmentController",
            controllerAs: "Ctrl"
        });

})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('AdminController', adminController);

    adminController.$inject = ['$location']; 

    function adminController($location) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'AdminController';

        activate();

        function activate() { }
    }
})();

(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('ErrorController', errorCtrl);

    errorCtrl.$inject = ['$scope', '$routeParams']; 

    function errorCtrl($scope, $routeParams) {
        $scope.Path = $routeParams.Path;
    }
})();

(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('MenuController', menuController);

    menuController.$inject = ['$scope', '$location'];

    function menuController($scope, $location) {
        var vm = this;

        vm.register = function () {
            $location.path('/Home/RegisterAccount');
        }

        vm.profile = function () {
            $location.path('/Home/AccountProfile');
        }

        vm.login = function () {
            moveToUrlWithReturn('/Account/Login');
        }

        vm.logOff = function () {
            moveToUrlWithReturn('/Account/LogOut');
        }

        vm.profile = function () {
            $location.path('/Home/AccountProfile');
        }

        vm.b2b = function () {
            $location.path('/b2b');
        }

        vm.admin = function () {
            $location.path('/Admin');
        }

        function moveToUrlWithReturn(url) {
            if ($location.path() === url) return;
            var currentUrl = $location.url();
            $location.path(url).search('ReturnUrl', currentUrl);
        }

    }
})();

(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('ProfileController', profileController);

    profileController.$inject = ['$location', '$templateCache', '$rootScope', '$route', 'AppConfig', 'dataFactory', 'bootstrapFactory'];

    function profileController($location, $templateCache, $rootScope, $route, appConfig, dataFactory, bootstrapFactory) {
        /* jshint validthis:true */

        $templateCache.remove(appConfig.accountProfileUrl);
        // or
        //$templateCache.removeAll();

        // variable

        var vm = this;
        vm.data = {}
        vm.allowChangeCompany = false;
        vm.sendingData = false;

        // properties

        Object.defineProperty(vm, "access1C", {
            get: function () {
                if (vm.data.Access1C) return "B2B доступ разрешен";
                return "B2B доступ ЗАПРЕЩЁН";
            }
        });

        // activate

        activate();

        function activate() { }

        // function

        vm.debug = function () {
            console.log(vm);
        }

        vm.cancel = function () {
            $rootScope.toPreviousPage();
        }

        vm.save = function () {
            vm.sendingData = true;
            dataFactory.sendForm(appConfig.accountProfileUrl, vm.data).then(function () {
                bootstrapFactory.showModalConfirmation("Аккаунт успешно обновлен.").then(function () {
                    $rootScope.toPreviousPage();
                });
            }, function (evt) {
                bootstrapFactory.showModalErrors("Ошибка обновления данных", evt.data);
                vm.sendingData = false;
            });
        }

        vm.changeCompany = function () {
            vm.allowChangeCompany = true;
        }

        vm.changeEmail = function () {
            var result = bootstrapFactory.showEmailChangeRequest();
            console.log(result);
            result.closed.then(function() {
                $route.reload();
            });
        }

        vm.sendConfirmation = function () {
            // необходимо выслать подтверждение email
            var result = dataFactory.sendRequest(appConfig.requestEmailConfirmationUrl, {});
            result.then(function () {
                bootstrapFactory.showModalConfirmation('Письмо для подверждения электронного адреса отправлено на email:' +
                                                    vm.data.Email);
            }, function () {
                bootstrapFactory.showModalConfirmation('В процессе отправки письма произошла ошибка.');
            });

        }
    }
})();

(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('RegisterController', registerController);

    registerController.$inject = ['$location', '$rootScope', 'dataFactory', 'bootstrapFactory'];

    function registerController($location, $rootScope, dF, bD) {
        /* jshint validthis:true */
        var vm = this;
        vm.submiting = false;
        // -------------------------

        vm.cancel = function () {
            if ($rootScope.previousPage) {
                $location.url($rootScope.previousPage);
                return;
            }
            $location.url('/');
        }

        vm.submit = function () {
            vm.submiting = true;
            var result = dF.sendUserRegistration(vm.data);
            result.then(function () {

                //console.log("Send Success");

                var result = bD.showModalConfirmation("Регистрация прошла успешно. Письмо с инструкциями по подтверждению электронного адреса " +
                    "Вашей учетной записи отправлено на указанный адрес Email." +
                    "Для работы в системе B2B допускаются пользователи допущенные администратором" +
                    "и успешно подтвердившие адрес электронной почты.");

                result.then(function () {
                    if ($rootScope.previousPage) {
                        $location.url($rootScope.previousPage);
                        return;
                    }
                    $location.url('/');
                });

            }, function (evt) {
                //console.log("Send Error");
                //console.log(evt);
                if (angular.isArray(evt.data)) {
                    var result = bD.showModalErrors("Ошибка регистрации на сервере:", evt.data);
                    result.then(function () {
                        vm.submiting = false;
                    });
                } else {
                    vm.submiting = false;
                }

            });
        }

        activate();

        function activate() {
            vm.submited = false;

            // if Authorized then redirect to root
            if ($rootScope.isAuth) {
                $location.url('/');
            }
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('UserManagmentController', userManagmentController);

    userManagmentController.$inject = ['$location', '$filter', 'userFactory', 'bootstrapFactory'];

    function userManagmentController($location, $filter, userFactory, bootstrapFactory) {
        /* jshint validthis:true */


        var vm = this;
        vm.title = 'UserManagmentController';

        // ---- pagination -----
        vm.maxSize = 5;
        vm.itemsPerPage = "5";
        vm.currentPage = 1;
        //vm.users = [];

        vm.activate1c = bootstrapFactory.showAccount1CActivationDialog;

        vm.deactivate1c = $$Deactivate1C;

        vm.reCalculate = calculateItems;

        vm.reLoad = loadDataFromServer;

        // ------------

        activate();

        function activate() {
            vm.viewMode = null;
            loadDataFromServer();
            //console.log(api1C);
            //api1C.users.query().then(
            // function(recive) {
            //     console.log("Success", recive);
            // },
            // function(recive) {
            //     console.log('Failed', recive);
            // }
            //);

        }

        function loadDataFromServer() {
            userFactory.query.then(
                 function (response) {
                     console.log("Success Response");

                     if (angular.isArray(response.data)) {
                         vm.originalData = response.data;
                         vm.totalItems = response.data.length;

                         calculateItems();
                     } else {
                         vm.originalData = [];
                         calculateItems();
                     }
                 }, function (response) {
                     console.log("Failed Response");

                     vm.originalData = [];
                     calculateItems();
                 });
        }

        function calculateItems() {
            vm.currentPage = 1;
            vm.users = $filter('access1c')(vm.originalData, vm.viewMode);
            //console.log(vm.users);
            vm.totalItems = vm.users.length;
        }

        function $$Deactivate1C(user) {
            var result = bootstrapFactory.showYesNo("Отключить доступ к 1С для аккаунта " + user.Nickname + '(' +
            user.Email + ')');
            result.then(function(recive) {
                var updateResult = userFactory.deactivate1C(user.Id);
                updateResult.success(function(recive) {
                    console.log(recive);
                    angular.extend(user, recive);
                });
            });
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('homeCtrl', controller);

    controller.$inject = ['$scope', '$routeParams', 'products'];

    function controller($scope, $routeParams, products) {
        $scope.title = 'homeCtrl';
        $scope.params = $routeParams;
        $scope.products = products.query();
        //console.log(products);
        $scope.products.$promise.then(function(result) {
            //console.log(result);
        });
        // console.log($scope.products);
        //activate();

        //function activate() { }
    }
})();

(function () {
    'use strict';

    angular
        .module('mainApp')
        .directive('compareTo', compareToDirective);

    compareToDirective.$inject = ['$window'];

    function compareToDirective($window) {

        // Creates:
        // 

        var directive = {
            require: "ngModel",
            scope: {
                otherModelValue: "=compareTo"
            },
            link: link,
            restrict: 'A'
        };

        return directive;

        function link(scope, element, attrs, ngModel) {
            ngModel.$validators.compareTo = function (modelValue) {
                return modelValue === scope.otherModelValue;
            };

            scope.$watch("otherModelValue", function () {
                ngModel.$validate();
            });
        }
    }

})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .directive('emailDuplicateCheck', usersDirective);

    usersDirective.$inject = ['$q', 'dataFactory'];

    function usersDirective($q, dataFactory) {

        var directive = {
            require: 'ngModel',
            link: link,
            restrict: 'A',
            scope: {}
        };
        return directive;

        function link(scope, elm, attrs, ctrl) {

            ctrl.$asyncValidators.emailDuplicateCheck = function (modelValue, viewValue) {

                if (ctrl.$isEmpty(modelValue)) {
                    // consider empty model valid
                    return $q.when();
                }

                var def = $q.defer();

                dataFactory.emailDuplicateCheck(modelValue).then(function (reciveBuf) {
                    if (reciveBuf.data) {
                        // The username is available
                        def.resolve();
                    } else {
                        def.reject();
                    }
                }, function () {
                    def.reject();
                });

                return def.promise;
            };

        }
    }

})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .directive('users', usersDirective);

    usersDirective.$inject = ['$q', 'dataFactory'];

    function usersDirective($q, dataFactory) {

        var directive = {
            require: 'ngModel',
            link: link,
            restrict: 'A',
            scope: {}
        };
        return directive;

        function link(scope, elm, attrs, ctrl) {

            ctrl.$asyncValidators.users = function (modelValue, viewValue) {

                if (ctrl.$isEmpty(modelValue)) {
                    // consider empty model valid
                    return $q.when();
                }

                var def = $q.defer();

                dataFactory.checkUser(modelValue).then(function (reciveBuf) {
                    if (reciveBuf.data) {
                        // The username is available
                        def.resolve();
                    } else {
                        def.reject();
                    }
                }, function () {
                    def.reject();
                });

                return def.promise;
            };

        }
    }

})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .filter('access1c', access1CFilter);

    access1CFilter.$inject = [];

    function access1CFilter() {
        return function (input, filterValue) {
            //console.log(input, filterValue);

            if (angular.isArray(input)) {
                var result = [];
                input.forEach(function(value, index) {
                    if (value.Access1C === filterValue || filterValue === null) {
                        result.push(value);
                    }
                });
                //console.log(result);
                return result;
            }
            return input;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .factory('bootstrapFactory', bootstrapDialog);

    bootstrapDialog.$inject = ['$uibModal', '$q'];

    function bootstrapDialog($uibModal, $q) {
        var service = {
            showModalConfirmation: $$ShowModalcfrm,
            showModalErrors: $$ShowModalErr,
            showEmailChangeRequest: $$ShowEmailChange,
            showAccount1CActivationDialog: $$ShowAccount1CActivation,
            showYesNo: $$ShowYesNo
        };

        // ---------------------------

        var modalTemplate = '<div class="modal-body">' +
            '<div class="panel panel-info" ng-show="true">' +
            '   <div class = "panel-body"> ' +
            '      <p>{{Ctrl.info}}</p>' +
            '   </div>' +
            ' </div>' +
            ' <button type="button" class="btn btn-success" data-ng-click="Ctrl.close()">Ок</button> ' +
            '</div>';

        // --------------------------


        // --------------------------

        return service;

        function $$ShowModalcfrm(message) {

            var opts = {
                backdrop: false,
                keyboard: true,
                backdropClick: true,
                size: 'lg',
                template: modalTemplate,
                controller: 'DialogController',
                controllerAs: 'Ctrl'
            };

            opts.resolve = {
                messageData: {
                    info: message
                }
            }

            return $uibModal.open(opts);
        }

        function $$ShowModalErr(header, messages) {

            if (!angular.isArray(messages)) {
                return $q.when();
            }

            var opts = {
                backdrop: false,
                keyboard: true,
                backdropClick: true,
                size: 'lg',
                templateUrl: "/views/dialogs/ErrorMessages.html",
                controller: 'ErrorDialogController',
                controllerAs: 'Ctrl'
            };

            opts.resolve = {
                messageData: {
                    headerText: header,
                    errorMessages: messages
                }
            }

            return $uibModal.open(opts);
        }

        function $$ShowEmailChange() {

            //console.log("show change email");

            var opt = {
                backdrop: false,
                keyboard: true,
                backdropClick: true,
                size: 'lg',
                templateUrl: '/views/dialogs/EmailChange.html',
                controller: 'EmailChangeController',
                controllerAs: 'Ctrl'
            }

            return $uibModal.open(opt);
        }

        function $$ShowAccount1CActivation(account) {
            var opts = {
                backdrop: false,
                keyboard: true,
                backdropClick: true,
                size: 'lg',
                templateUrl: '/views/dialogs/Account1CActivate.html',
                controller: 'Account1CActivateController',
                controllerAs: 'Ctrl'
            };

            opts.resolve = {
                account: account
            }

            return $uibModal.open(opts);
        }

        function $$ShowYesNo(message) {

            var template = '<div class="modal-body" ng-cloak>' +
                '<p>{{Ctrl.message}}</p>' +
                ' <button type="button" class="btn btn-warning" data-ng-click="Ctrl.yes()">Да</button> ' +
                ' <button type="button" class="btn btn-success" data-ng-click="Ctrl.no()">Нет</button> ' +
                '</div>';

            var opts = {
                backdrop: true,
                keyboard: true,
                backdropClick: true,
                size: 'lg',
                template: template,
                controller: ['$uibModalInstance', function ($uibModalInstance) {
                    var vm = this;
                    vm.message = message;
                    vm.yes = $uibModalInstance.close;
                    vm.no = $uibModalInstance.dismiss;
                }],
                controllerAs: 'Ctrl'
            };

            return $uibModal.open(opts).result;
        }
    }

})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .factory('dataFactory', dataService);

    dataService.$inject = ['$http', '$rootScope', 'AppConfig'];

    function dataService($http, $rootScope, appConfig) {
        var service = {
            sendForm: sendFormData,
            sendRequest: sendRequestByUrl,
            //getUsers: sendUsersRequest,
            checkUser: sendCheckUserRequest,
            emailDuplicateCheck: sendCheckEmailDuplicate,
            sendUserRegistration: sendUserRegistration,
            sendEmailChangeRequest: sendEmailChangeRequest

        };

        return service;

        // Declaration

        function sendFormData(url, data) {

            if (url === "" || angular.isUndefined(url)) return $q.reject("No Url in Request");

            var req = {
                method: 'POST',
                url: url,
                headers: {
                    'Content-Type': 'application/json; charset=utf-8',
                    "__RequestVerificationToken": $rootScope.antiforgery
                }
            }

            req.data = angular.toJson(data);

            //if (angular.isDefined($rootScope.antiforgery)) {
            //    req.headers["__RequestVerificationToken"] = $rootScope.antiforgery;
            //}

            console.log(req);

            return $http(req);
        }

        function sendRequestByUrl(url, data) {
            return $http.post(url, data, {
                headers: { "__RequestVerificationToken": $rootScope.antiforgery }
            });

        }

        //function sendUsersRequest(antiForgeryToken) {
        //    return $http.get(AppConfig.requestUsers, {
        //        headers: { "__RequestVerificationToken": antiForgeryToken }
        //    });
        //}

        function sendCheckUserRequest(name) {
            return $http.get(appConfig.requestCheckUser, {
                headers: { "__RequestVerificationToken": $rootScope.antiforgery },
                params: {"userName" : name}
            });
        }

        function sendCheckEmailDuplicate(email) {
            return $http.get(appConfig.requestChekEmail, {
                headers: { "__RequestVerificationToken": $rootScope.antiforgery },
                params: { "email" : email }
            });
        }

        function sendUserRegistration(data) {
            var config = {
                headers: { "__RequestVerificationToken": $rootScope.antiforgery }
                //,xsrfHeaderName: "X-XSRF-TOKEN"
            }
            return $http.post(appConfig.sendRegister, data, config );
        }

        function sendEmailChangeRequest(newEmail) {
            
            var config = {
                headers: { "__RequestVerificationToken": $rootScope.antiforgery },
                params: { "newEmail": newEmail }
            }
            return $http.post(appConfig.requestChangeEmailUrl, newEmail, config);
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('main-app.service', ['ngResource'])
        .factory('products', moduleMy);
        
        moduleMy.$inject = ['$resource'];

        function moduleMy($resource) {
            return $resource('/api/Products');
    }
})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .factory('userFactory', userFactory);

    userFactory.$inject = ['$http', '$rootScope', 'AppConfig'];

    function userFactory($http, $rootScope, config) {

        var opts = {
            url: config.api.userCrudUrl,
            headers: {
                'Content-Type': 'application/json; charset=utf-8',
                "__RequestVerificationToken": $rootScope.antiforgery
            }
        }

        var service = {
            // get: $$get,
            save: $$Save,
            // query: $$query,
            remove: $$Remove,
            create: $$Create,
            activate1c: $$Activate,
            deactivate1C: $$Deactivate
        };

        Object.defineProperty(service,'get', { get: $$Get });

        Object.defineProperty(service, 'query', { get: $$Query });

        return service;

        function $$Get(id) {
            var request = angular.extend({
                method: "POST"
            }, opts);

            request.url += "/" + id;

            return $http(request);
        }

        function $$Create(value) {
            //opts.data = value;
            //opts.method = "POST";
            var request = angular.extend({
                method: "POST",
                data: value
            }, opts);

            return $http(request);
        }

        function $$Save(value) {
            //opts.url += "/" + value.id;
            //opts.data = value;
            //opts.method = "PUT";

            var request = angular.extend({
                method: "PUT",
                data: value
            }, opts);

            request.url += "/" + value.id;

            return $http(request);
        }

        function $$Query() {
            //opts.method = "GET";
            var request = angular.extend({
                method: "GET"
            }, opts);

            return $http(request);
        }

        function $$Remove(id) {
            //opts.url += "/" + id;
            //opts.method = "DELETE";

            var request = angular.extend({
                method: "DELETE"
            }, opts);

            request.url += "/" + id;

            return $http(request);
        }

        function $$Activate(userId, id1C) {
            var request = angular.extend({
                method: 'POST',
                params: { id1C: id1C}
            }, opts);

            request.url += "/" + userId;

            return $http(request);

        }

        function $$Deactivate(userId) {

            var request = angular.extend({
                method: 'POST'
            }, opts);

            request.url += "/" + userId + "/Deactivate"; 

            return $http(request);
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('Account1CActivateController', emailChangeController);


    emailChangeController.$inject = ['$uibModalInstance', 'account', 'api1CFactory', 'userFactory', 'bootstrapFactory'];

    function emailChangeController($uibModalInstance, account, api1C, userFactory, bF) {

        var vm = this;

        //vm.data = {}

        vm.IsSending = false;

        vm.reLoadUsers = $$LoadUsers;

        activate();
        // ------------------------


        function activate() {
            $$LoadUsers();
        }

        vm.close = function () {
            $uibModalInstance.dismiss();
        }

        vm.ok = function () {
            console.log($uibModalInstance, account, api1C, userFactory);
            var result = userFactory.activate1c(account.Id, vm.selected.Id);
            result.then(function (recive) {
                console.log("Activate Success ");
                //console.log(recive);
                angular.extend(account, recive.data);
                //console.log(account);
                //account = recive.data;
                $uibModalInstance.close();
            }, function (recive) {
                console.log("Failed activate: " + recive);
                bF.showModalErrors("Ошибка", recive.data);
            });
            //vm.IsSending = true;
            //var result = dF.sendEmailChangeRequest(vm.data.Email);
            //result.then(function () {
            //    $uibModalInstance.close();
            //    bF.showModalConfirmation("Для изменения Email следуйте дальнейшим инструкциям " +
            //        "в письме отправленном на новый электронный адрес( " + vm.data.Email + " ). ");
            //}, function() {
            //    bF.showModalErrors("Ошибка изменения Email.", "При изменении электронного адреса произошла ошибка.");
            //    vm.IsSending = false;
            //});
        }

        function $$LoadUsers() {
            vm.accounts1C = [];
            api1C.users.query().then(function(recive) {
                console.log("Load Success " + recive);
                if (angular.isArray(recive.data)) {
                    vm.accounts1C = recive.data;
                }
            }, function(recive) {
                console.log("Failed load: " + recive);
                bF.showModalErrors("Ошибка", recive.data);
            });
        }

    }

})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('DialogController', dialogController);
        //.controller('EmailChangeDialogController', emailChangeController);

    // Base controller
    dialogController.$inject = ['$uibModalInstance', 'messageData'];

    function dialogController($uibModalInstance, messageData) {
        /* jshint validthis:true */
        var vm = this;
        vm.info = messageData.info;

        vm.close = function () {
            $uibModalInstance.close();
        }

    }

    //// Childs -------------

    //// Email Change child
    //emailChangeController.$inject = ['$uibModalInstance', 'messageData'];

    //function emailChangeController($uibModalInstance, messageData) {

    //    dialogController.call(this);

    //    var vm = this;

    //    vm.data = {}

    //    vm.ok = function() {
    //        console.log("Send Email Change Request");
    //    }

    //}

    //emailChangeController.prototype = Object.create(dialogController.prototype);
})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('EmailChangeController', emailChangeController);


    emailChangeController.$inject = ['$uibModalInstance', 'dataFactory', 'bootstrapFactory'];

    function emailChangeController($uibModalInstance, dF, bF) {

        var vm = this;

        vm.data = {}

        vm.IsSending = false;

        // ------------------------

        vm.close = function () {
            $uibModalInstance.close();
        }

        vm.ok = function () {
            vm.IsSending = true;
            var result = dF.sendEmailChangeRequest(vm.data.Email);
            result.then(function () {
                $uibModalInstance.close();
                bF.showModalConfirmation("Для изменения Email следуйте дальнейшим инструкциям " +
                    "в письме отправленном на новый электронный адрес( " + vm.data.Email + " ). ");
            }, function() {
                bF.showModalErrors("Ошибка изменения Email.", "При изменении электронного адреса произошла ошибка.");
                vm.IsSending = false;
            });
        }

    }

})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .controller('ErrorDialogController', errorDialogController);

    errorDialogController.$inject = ['$uibModalInstance', 'messageData'];

    function errorDialogController($uibModalInstance, mD) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'ErrorDialogController';
        vm.ErrorMessages = mD.errorMessages;
        vm.header = mD.headerText;

        // --------------------------------

        vm.close = function () {
            $uibModalInstance.close();
        }

        activate();

        function activate() { }
    }
})();

(function () {
    'use strict';

    angular
        .module('mainApp')
        .factory('api1CFactory', _1CFactory);

    _1CFactory.$inject = ['user1CFactory'];

    function _1CFactory(user1CFactory) {
        var service = {};

        Object.defineProperty(service, 'users', {
            get: function() { return user1CFactory; }
        });

        return service;
    }
})();
(function () {
    'use strict';

    angular
        .module('mainApp')
        .factory('user1CFactory', user1CFactory);

    user1CFactory.$inject = ['$http', '$rootScope', 'AppConfig'];

    function user1CFactory($http, $rootScope, config) {
        var service = {
            //get: $get,
            query: $$Query
        };

        var req = {
            url: config.api1C.apiUsers,
            headers: {
                'Content-Type': 'application/json; charset=utf-8',
                "__RequestVerificationToken": $rootScope.antiforgery
            }
        }

        return service;

        function $$Query() {
            req.method = 'GET';
            return $http(req);
        }

        //function $get(id) { }


    }
})();